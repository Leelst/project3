# -*- coding: utf-8 -*-
"""project3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T-YWKqFxBmraNc3IEUHda0UuS1Jx0LzH
"""

import pandas as pd

df = pd.read_csv('./results.csv')

df['date'] = pd.to_datetime(df['date'])

df = df[df['date'] > '2000-01-01']

def hometeam(df):
  if df['home_score'] == df['away_score']:
         val = 1
  elif df['home_score'] > df['away_score']:
         val = 2
  else:
         val = 0
  return val

def awayteam(df):
  if df['home_score'] == df['away_score']:
         val = 1
  elif df['home_score'] < df['away_score']:
         val = 2
  else:
         val = 0
  return val

countries = ['Ecuador','Qatar','Senegal','Netherlands','England','Iran','United States','Wales','Argentina',
             'Saudi Arabia','Mexico','Poland','France','Australia','Denmark','Tunisia','Spain','Costa Rica',
             'Germany','Japan', 'Belgium','Canada','Morocco','Croatia','Brazil','Serbia','Switzerland','Cameroon',
             'Portugal','Ghana', 'Uruguay', 'South Korea']

for i, country in enumerate(countries):
    want_to_find = country

    #원하는 팀을 모두 홈으로 옮기고 승점도 부여해주는 함수
    def nation2(x):
        df1 = df[df['home_team']== want_to_find]
        df1['Target'] = want_to_find
        df1['result'] = df.apply(hometeam,axis = 1)
    
        df2 = df[df['away_team'] == want_to_find]
        df2 = df2.rename(columns = {'home_team' : 'away_team', 'away_team' : 'home_team'})
        df2['Target'] = want_to_find
        df2['result'] = df.apply(hometeam,axis = 1)
        df_f = pd.concat([df1,df2]).reset_index(drop=True)
        return df_f

    #add_[숫자]로 저장
    globals()['add_{}'.format(i)] = nation2(df)

#합치기 
list=[]
for i in range(32):
  list.append(globals()['add_'+str(i)])

total_df = pd.concat(list)

ranking = pd.read_excel('./fifa_ranking.xlsx', engine = 'openpyxl')

ranking.head(50)

import numpy as np

S = ranking['COUNTRY'][(ranking["FIFA MEN'S RANKING"] > 0)&(ranking["FIFA MEN'S RANKING"] < 16)].tolist()
A = ranking['COUNTRY'][(ranking["FIFA MEN'S RANKING"] > 15)&(ranking["FIFA MEN'S RANKING"] < 36)].tolist()
B = ranking['COUNTRY'][(ranking["FIFA MEN'S RANKING"] > 35)&(ranking["FIFA MEN'S RANKING"] < 61)].tolist()
C = ranking['COUNTRY'][(ranking["FIFA MEN'S RANKING"] > 60)].tolist()

####방금 만든 S 리스트에서 기존 total 데이터와 국가명을 다르게 표시한 내용이 있어서 수동으로 수정해주는 과정 ###
S =['Brazil',
 'Belgium',
 'France',
 'Argentina',
 'England',
 'Italy',
 'Spain',
 'Portugal',
 'Mexico',
 'Netherlands',
 'Denmark',
 'Germany',
 'Uruguay',
 'Switzerland',
 'United States']

####방금 만든 A 리스트에서 기존 total 데이터와 국가명을 다르게 표시한 내용이 있어서 수동으로 수정해주는 과정 ###
A = ['Croatia',
 'Colombia',
 'Wales',
 'Sweden',
 'Senegal',
 'Iran',
 'Peru',
 'Japan',
 'Morocco',
 'Serbia',
 'Poland',
 'Ukraine',
 'Chile',
 'South Korea',
 'Nigeria',
 'Costa Rica',
 'Egypt',
 'Czech Republic',
 'Austria',
 'Tunisia']

total_df_prac = total_df.copy()
away_list = total_df_prac['away_team'].tolist()

away_class_list = []
for country in away_list:
  if country in S:
    val = "S"
  elif country in A:
    val = "A"
  elif country in B:
    val = "B"
  elif country in C:
    val = "C"
  else:
    val = ""
  away_class_list.append(val)

total_df_prac['away_class'] = away_class_list

#결측치 값 262
total_df_prac[total_df_prac['away_class'] ==""].count()

mask = total_df_prac['away_class'].isin([""])

final_df = total_df_prac[~mask].reset_index(drop=True)

final_df.columns

change = final_df['away_class']

final_df.insert(loc=3,column='away_cls', value = change)

final_df.drop('away_class', axis= 1, inplace =True)

## 최종 데이터프레임
## 학습데이터

final_df



#fifa_country_data

team_value = pd.read_excel('./fifa_country_data.xlsx', engine = 'openpyxl')

##몸값 데이터
team_value

nations = team_value['Nation'].tolist()
nation = []
for i in range(len(nations)):
  nation.append(nations[i][1:])
########## nation 리스트에 값이 [%Brazil, %Belgium ...] 이런식이라 뒤에 [1:]으로 국가명만 뽑음


squad_size = team_value['Squad_size'].tolist()
Avg_age = team_value['Avg_age'].tolist()
Total_value = team_value['Total_value'].tolist()

final_df['away_team'].unique()

nation = ['Brazil',
 'Belgium',
 'Argentina',
 'France',
 'England',
 'Spain',
 'Italy',
 'Netherlands',
 'Portugal',
 'Denmark',
 'Germany',
 'Mexico',
 'Uruguay',
 'United States',
 'Croatia',
 'Switzerland',
 'Colombia',
 'Senegal',
 'Wales',
 'Sweden',
 'Peru',
 'Morocco',
 'Iran',
 'Japan',
 'Serbia',
 'Poland',
 'Ukraine',
 'South Korea',
 'Chile',
 'Tunisia',
 'Nigeria',
 'Czechia',
 'Austria',
 'Costa Rica',
 'Russia',
 'Norway',
 'Hungary',
 'Cameroon',
 'Australia',
 'Egypt',
 'Algeria',
 'Türkiye',
 'Canada',
 'Ecuador',
 'Scotland',
 'Mali',
 'Republic of Ireland',
 'Greece',
 'Qatar',
 'Paraguay',
 'Slovakia',
 'Ivory Coast',
 'Saudi Arabia',
 'Romania',
 'Burkina Faso',
 'Venezuela',
 'Bosnia',
 'N. Ireland',
 'Finland',
 'Ghana',
 'Panama',
 'Jamaica',
 'Iceland',
 'North Macedonia',
 'Slovenia',
 'Albania',
 'Montenegro',
 'South Africa',
 'U. A. E.',
 'Iraq',
 'El Salvador',
 'Cape Verde',
 'DR Congo',
 'Bulgaria',
 'Oman',
 'Israel',
 'Uzbekistan',
 'China',
 'Gabon',
 'Honduras',
 'Bolivia',
 'Georgia',
 'Guinea',
 'Curaçao',
 'Bahrain',
 'Jordan',
 'Haiti',
 'Zambia',
 'Syria',
 'Uganda',
 'Benin',
 'Armenia',
 'Luxembourg',
 'Palestine',
 'Kyrgyzstan',
 'Belarus',
 'Vietnam',
 'Equat. Guinea',
 'Congo',
 'Lebanon',
 'Trinidad',
 'Kenya',
 'New Zealand',
 'India',
 'Madagascar',
 'Kosovo',
 'Cyprus',
 'Tajikistan',
 'Estonia',
 'Mauritania',
 'Thailand',
 'North Korea',
 'Sierra Leone',
 'Kazakhstan',
 'Guinea-Bissau',
 'Guatemala',
 'Namibia',
 'Mozambique',
 'Niger',
 'Libya',
 'Malawi',
 'Angola',
 'Zimbabwe',
 'The Gambia',
 'Faroe Islands',
 'Comoros',
 'Togo',
 'Azerbaijan',
 'Latvia',
 'Sudan',
 'Tanzania',
 'Antigua and B.',
 'Central Africa',
 'Philippines',
 'Turkmenistan',
 'Rwanda',
 'Solomon Islands',
 'Ethiopia',
 'Nicaragua',
 'Burundi',
 'St. Kitts/Nevis',
 'Lithuania',
 'Suriname',
 'Eswatini',
 'Hong Kong',
 'Lesotho',
 'Malaysia',
 'Kuwait',
 'Botswana',
 'Liberia',
 'Dominican Rep.',
 'Andorra',
 'Yemen',
 'Afghanistan',
 'Indonesia',
 'Maldives',
 'C. Taipei',
 'Myanmar',
 'Singapore',
 'New Caledonia',
 'Papua N. Guinea',
 'Tahiti',
 'Fiji',
 'Vanuatu',
 'South Sudan',
 'Barbados',
 'Cuba',
 'Malta',
 'Puerto Rico',
 'Bermuda',
 'Grenada',
 'Guyana',
 'Saint Lucia',
 'Cambodia',
 'Belize',
 'Nepal',
 'Montserrat',
 'Moldova',
 'Mauritius',
 'St. Vincent',
 'Chad',
 'Macau',
 'Laos',
 'Mongolia',
 'Dominica',
 'Bhutan',
 'São Tomé and P.',
 'A. Samoa',
 'Cook Islands',
 'Brunei',
 'Samoa',
 'Bangladesh',
 'Djibouti',
 'Liechtenstein',
 'Seychelles',
 'Pakistan',
 'Cayman Islands',
 'Tonga',
 'Timor-Leste',
 'Somalia',
 'Gibraltar',
 'Eritrea',
 'Aruba',
 'Bahamas',
 'Guam',
 'Turks-Caicos',
 'Sri Lanka',
 'US Virgin',
 'B. Virgin',
 'Anguilla',
 'San Marino']

home_index = []
for i in range(len(final_df['home_team'])):
   index_num = nation.index(final_df['home_team'][i])
   home_index.append(index_num)

away_index = []

for i in range(len(final_df['away_team'])):
  try:
   index_num2 = nation.index(final_df['away_team'][i])
  except:
   index_num2 = 100
  
  away_index.append(index_num2)

column_home_rank = []
column_home_squad_size = []
column_home_avg_age = []
column_home_total_value = []

for i in home_index:
  column_home_rank_for = team_value['#'][i]
  column_home_squad_size_for = team_value["Squad_size"][i]
  column_home_avg_age_for = team_value['Avg_age'][i]
  column_home_total_value_for = team_value['Total_value'][i]

  column_home_rank.append(column_home_rank_for)
  column_home_squad_size.append(column_home_squad_size_for)
  column_home_avg_age.append(column_home_avg_age_for)
  column_home_total_value.append(column_home_total_value_for)

final_df.insert(loc=2,column='home_rank', value = column_home_rank)
final_df.insert(loc=3,column='home_squad_size', value = column_home_squad_size)
final_df.insert(loc=4,column='home_avg_age', value = column_home_avg_age)
final_df.insert(loc=5,column='home_total_value', value = column_home_total_value)

column_away_rank =[]
column_away_squad_size = []
column_away_avg_age = []
column_away_total_value = []

for i in away_index:
  column_away_rank_for = team_value['#'][i]
  column_away_squad_size_for = team_value["Squad_size"][i]
  column_away_avg_age_for = team_value['Avg_age'][i]
  column_away_total_value_for = team_value['Total_value'][i]


  column_away_rank.append(column_away_rank_for)
  column_away_squad_size.append(column_away_squad_size_for)
  column_away_avg_age.append(column_away_avg_age_for)
  column_away_total_value.append(column_away_total_value_for)

final_df.insert(loc=7,column='away_rank', value = column_away_rank)
final_df.insert(loc=8,column='away_squad_size', value = column_away_squad_size)
final_df.insert(loc=9,column='away_avg_age', value = column_away_avg_age)
final_df.insert(loc=10,column='away_total_value', value = column_away_total_value)

final_df

final_df.columns

final_df.drop(columns = ['date','away_cls','tournament', 'city', 'country', 'neutral'],inplace = True)

final_df



###몸값 칼럼 두개 (home,away) 단위 통일 => astype('float')
final_df['home_total_value'] = final_df['home_total_value'].str.replace("€","")
final_df['home_total_value'] = final_df['home_total_value'].str.replace("m","000")
final_df['home_total_value'] = final_df['home_total_value'].str.replace("bn","000000")
final_df['home_total_value'] = final_df['home_total_value'].str.split(".")
final_df['home_total_value'] = final_df['home_total_value'].str[0] + final_df['home_total_value'].str[1]
final_df['home_total_value'] = final_df['home_total_value'].str[:-2] + "." + final_df['home_total_value'].str[-2:]
final_df['home_total_value'] = final_df['home_total_value'].astype('float')

final_df['away_total_value'] = final_df['away_total_value'].str.replace("€","")
final_df['away_total_value'] = final_df['away_total_value'].str.replace("m","000")
final_df['away_total_value'] = final_df['away_total_value'].str.replace("bn","000000")
final_df['away_total_value'] = final_df['away_total_value'].str.replace("Th","00")
final_df['away_total_value'] = final_df['away_total_value'].str.split(".")
final_df['away_total_value'] = final_df['away_total_value'].str[0] + final_df['away_total_value'].str[1]
final_df['away_total_value'] = final_df['away_total_value'].str[:-2] + "." + final_df['away_total_value'].str[-2:]
final_df['away_total_value'] = final_df['away_total_value'].astype('float')

##위에 내용 작성하는 과정에서 확인하는 내용 (Th 대신 00을 넣어도 상관없는 이유 => Th데이터들은 소수점이 없기 때문)##
#######final_df['away_total_value'][final_df['away_total_value'].str.contains('Th')].unique()



final_df

###홈팀, 어웨이팀 이름과 Target 컬럼 없어도 될듯
final_df.drop(columns=['home_team','away_team','Target'],inplace=True)


######최종 전처리 데이터##########
##############################
##############################
final_df = final_df.drop(columns = ['home_score','away_score'])
final_df

###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
########################################################데이터프레임 전처리 종료#####################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################
###############################################################################################################################################



data = final_df.copy()

data

# 훈련데이터 준비


X_train = data

fix_a = X_train[X_train['away_squad_size']== '-'].index.tolist()
X_train.loc[fix_a,'away_squad_size'] = '27'

X_train['home_rank'] = X_train['home_rank'].str[-3].astype('int')
X_train['away_rank'] = X_train['away_rank'].str[-3].astype('int')
X_train['away_squad_size'] = X_train['away_squad_size'].astype('int')
X_train = X_train.dropna()

X_train.to_excel('train_data.xlsx')

y_train = X_train['result']

X_train = X_train.drop(columns= 'result')

# 테스트데이터 생성
group_a = ['Qatar','Ecuador','Senegal','Netherlands']

team_value

## team_value_fix
team_value_fix = team_value.copy() 
team_value_fix['Nation'] = nation

team_value_fix['Total_value'] = team_value_fix['Total_value'].str.replace("€","")
team_value_fix['Total_value'] = team_value_fix['Total_value'].str.replace("m","000")
team_value_fix['Total_value'] = team_value_fix['Total_value'].str.replace("bn","000000")
team_value_fix['Total_value'] = team_value_fix['Total_value'].str.replace("Th","00")
team_value_fix['Total_value'] = team_value_fix['Total_value'].str.split(".")
team_value_fix['Total_value'] = team_value_fix['Total_value'].str[0] + team_value_fix['Total_value'].str[1]
team_value_fix['Total_value'] = team_value_fix['Total_value'].str[:-2] + "." + team_value_fix['Total_value'].str[-2:]
team_value_fix['Total_value'] = team_value_fix['Total_value'].astype('float')

team_value_fix['#'] = team_value_fix['#'].str[:-2].astype('int')
team_value_fix['#']

country_datalist = []
for n in range(len(team_value_fix)):
  k = team_value_fix.loc[n,['#','Squad_size','Avg_age','Total_value']].tolist()
  country_datalist.append(k)

country_datalist

countries = ['Ecuador','Qatar','Senegal','Netherlands','England','Iran','United States','Wales','Argentina',
             'Saudi Arabia','Mexico','Poland','France','Australia','Denmark','Tunisia','Spain','Costa Rica',
             'Germany','Japan', 'Belgium','Canada','Morocco','Croatia','Brazil','Serbia','Switzerland','Cameroon',
             'Portugal','Ghana', 'Uruguay', 'South Korea']

nation_list = team_value_fix['Nation'].tolist()


## countries 안에 들어있는 국가는 2022카타르 월드컵 본선진출 국가이다.
## 이 국가의 국가명을 기준으로 team_value_fix 에서의 인덱스를 구한다.
index32 = []
for country in countries:
  index32.append(nation_list.index(country))

## 이제 country_datalist와 index32 두 개의 리스트를 이용해서 데이터 셋을 생성하면 된다.
info_wc = []
for index in index32:
  info_wc.append(country_datalist[index])

info_wc

index32

group_a = info_wc[0:4]
group_b = info_wc[4:8]
group_c = info_wc[8:12]
group_d = info_wc[12:16]
group_e = info_wc[16:20]
group_f = info_wc[20:24]
group_g = info_wc[24:28]
group_h = info_wc[28:32]

group_total = [group_a, group_b, group_c, group_d, group_e, group_f, group_g, group_h]

num = 1
for group in group_total:

  globals()['g_stage{}'.format(num)] = [group[0] + group[1], group[0] + group[2],group[0] + group[3], group[1] + group[2],group[1] + group[3],group[2] + group[3] ] 
  num += 1

g_stage_list = g_stage1 + g_stage2 + g_stage3 + g_stage4 + g_stage5 + g_stage6 + g_stage7 + g_stage8

import numpy as np

g_stage_array = np.array(g_stage_list)

## 테스트 데이터 만들기 ##
X_test_g_stage = pd.DataFrame(data=g_stage_array[:], columns=['home_rank', 'home_squad_size', 'home_avg_age',
       'home_total_value','away_rank', 'away_squad_size','away_avg_age', 'away_total_value'])

X_test_g_stage[['home_rank','home_squad_size','away_rank','away_squad_size']].astype('int')




X_train = X_train.dropna()

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
clf = model.fit(X_train ,y_train)

predict = clf.predict(X_test_g_stage)

result_group_stage = X_test_g_stage.copy()
result_group_stage['result'] = predict

result_group_stage.to_excel('result_data.xlsx')

import pickle

#with open('model.pkl','wb') as pickle_file:
   # pickle.dump(model, pickle_file)